@{
    ViewBag.Title = "UsersView";
    Layout = "~/Views/Admin/_AdminLayout.cshtml";
}

<script type="text/javascript" src="@Url.Content("~/Scripts/CustomGrid.js")"></script>

<style>
    table.customGrid tbody tr.selected {
        background-color: lightgray;
    }
</style>

<h2>Пользователи, их акаунты и карты</h2>

<input type="button" data-bind="click: addUser" value="Добавить" />
<div data-bind="with: usersGrid">
    @Html.Partial("_PartialCustomGrid")
</div>

<!-- ko if: usersGrid.selectedRow() -->
<h2 data-bind="text: 'Сеансовые ключи: ' + (!usersGrid.selectedRow() ? '' : usersGrid.selectedRow().FIO.value())"></h2>
<!-- ko if: usersGrid.selectedRow().Id.value() > 0 -->
<input type="button" data-bind="click: addSessionPassword" value="Добавить" />
<!-- /ko -->
<div data-bind="with: sessionPasswordsGrid">
    @Html.Partial("_PartialCustomGrid")
</div>
<!-- /ko -->

<!-- ko if: usersGrid.selectedRow() -->
<h2 data-bind="text: 'Счета: ' + (!usersGrid.selectedRow() ? '' : usersGrid.selectedRow().FIO.value())"></h2>
<!-- ko if: usersGrid.selectedRow().Id.value() > 0 -->
<input type="button" data-bind="click: addAccount" value="Добавить" />
<!-- /ko -->
<div data-bind="with: accountsGrid">
    @Html.Partial("_PartialCustomGrid")
</div>
<!-- /ko -->

<!-- ko if: accountsGrid.selectedRow() -->
<h2 data-bind="text: 'Карты: ' + (!usersGrid.selectedRow() ? '' : usersGrid.selectedRow().FIO.value())"></h2>
<!-- ko if: accountsGrid.selectedRow().Id.value() > 0 -->
<input type="button" data-bind="click: addCard" value="Добавить" />
<!-- /ko -->
<div data-bind="with: cardsGrid">
    @Html.Partial("_PartialCustomGrid")
</div>
<!-- /ko -->

<script type="text/javascript">
    window.UsersViewModel = function (resources)
    {
        var self = this;

        var regionsList = ko.observableArray([]);
        var cardTypesList = ko.observableArray([]);
        var dateRenderer = function (date)
        {
            if (date == '')
                return '';
            return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
        };
        var userColumns = [
            {
                field: "Login",
                type: CustomGrid.columnTypes.string,
                text: 'Имя пользователя'
            },
            {
                field: "Password",
                type: CustomGrid.columnTypes.string,
                text: 'Пароль'
            },
            {
                field: "FIO",
                type: CustomGrid.columnTypes.string,
                text: 'ФИО'
            },
            {
                field: "PassportNumber",
                type: CustomGrid.columnTypes.string,
                mask: '19999992999AA9',
                definitions: {
                    '1': '[1-6]',
                    '2': '(A|B|C|K|E|H|M)',
                    'A': '[A-Z]'
                },
                text: 'Личный номер'
            },
            {
                field: "IsBlocked",
                type: CustomGrid.columnTypes.boolean,
                text: 'Блокирован'
            },
            {
                field: "IsActivated",
                type: CustomGrid.columnTypes.boolean,
                text: 'Активный'
            },
            {
                field: "IsAdmin",
                type: CustomGrid.columnTypes.boolean,
                text: 'Администратор'
            },
            {
                field: "RegionId",
                type: CustomGrid.columnTypes.list,
                list: regionsList,
                defaultValue: 0,
                valueField: 'Id',
                textField: 'Name',
                renderer: function (row, column)
                {
                    for (var i in regionsList())
                        if (regionsList()[i].Id == row.RegionId.value())
                            return regionsList()[i].Name;
                    return '';
                },
                text: 'Область'
            },
            {
                field: "CityId",
                type: CustomGrid.columnTypes.list,
                valueField: 'Id',
                textField: 'Name',
                renderer: function (row, column)
                {
                    for (var i in regionsList())
                        if (regionsList()[i].Id == row.RegionId.value())
                        {
                            for (var j in regionsList()[i].cities)
                                if (regionsList()[i].cities[j].Id == row.CityId.value())
                                    return regionsList()[i].cities[j].Name;
                        }
                    return '';
                },
                text: 'Город'
            }
            @*,
            {
                type: CustomGrid.columnTypes.html,
                html: function (row, column)
                {
                    return '<a href="@Url.Action("CardsView", "Admin")?UserId='+row.Id.value()+'">Карточки</a>';
                }
            }*@
        ];
        var sessionPasswordColumns = [
            {
                field: "Password",
                type: CustomGrid.columnTypes.string,
                mask: "99999999",
                text: 'Пароль'
            }
        ];
        var currencies = [];
        for(var i in Currencies)
            currencies.push({ Value: Currencies[i], Name: i });
        var accountColumns = [
            {
                field: "Number",
                type: CustomGrid.columnTypes.string,
                mask: "9999 9999 9999 9999",
                text: 'Номер счета'
            },
            {
                field: "OpenDate",
                type: CustomGrid.columnTypes.date,
                renderer: function (row, column)
                {
                    return dateRenderer(row.OpenDate.value());
                },
                text: 'Дата открытия'
            },
            {
                field: "CloseDate",
                type: CustomGrid.columnTypes.date,
                renderer: function (row, column)
                {
                    return dateRenderer(row.CloseDate.value());
                },
                text: 'Дата закрытия'
            },
            {
                field: "Balance",
                type: CustomGrid.columnTypes.number,
                text: 'Остаток'
            },
            {
                field: "MinBalance",
                type: CustomGrid.columnTypes.number,
                text: 'Мин. остаток'
            },
            {
                field: "Currency",
                type: CustomGrid.columnTypes.list,
                list: currencies,
                valueField: 'Value',
                textField: 'Name',
                defaultValue: 0,
                text: 'Валюта',
                renderer: function (row, column)
                {
                    for (var i in currencies)
                        if (currencies[i].Value == row.Currency.value())
                            return currencies[i].Name;
                    return '';
                }
            },
            {
                field: "IsOpened",
                type: CustomGrid.columnTypes.boolean,
                text: 'Открыт'
            }
        ];
        var cardColumns = [
            {
                field: "Number",
                type: CustomGrid.columnTypes.string,
                mask: "9999 9999 9999 9999",
                text: 'Номер карты'
            },
            {
                field: "CreateDate",
                type: CustomGrid.columnTypes.date,
                renderer: function (row, column)
                {
                    return dateRenderer(row.CreateDate.value());
                },
                text: 'Дата создания'
            },
            {
                field: "ExpireDate",
                type: CustomGrid.columnTypes.date,
                renderer: function (row, column)
                {
                    return dateRenderer(row.ExpireDate.value());
                },
                text: 'Срок действия'
            },
            {
                field: "CardTypeId",
                type: CustomGrid.columnTypes.list,
                list: cardTypesList,
                defaultValue: 0,
                valueField: 'Id',
                textField: 'Name',
                renderer: function (row, column)
                {
                    for (var i in cardTypesList())
                        if (cardTypesList()[i].Id == row.CardTypeId.value())
                            return cardTypesList()[i].Name;
                    return '';
                },
                text: 'Тип'
            },
            {
                field: "IsAttached",
                type: CustomGrid.columnTypes.boolean,
                text: 'Привязана'
            },
            {
                field: "IsBlocked",
                type: CustomGrid.columnTypes.boolean,
                text: 'Блокирована'
            },
            {
                field: "IsExpired",
                type: CustomGrid.columnTypes.boolean,
                text: 'Просрочена'
            }
        ];

        self.usersGrid = new CustomGrid({ columns: userColumns, pager: { pageSize: 10 } });
        self.usersGrid.onApplyChanges.subscribe(function (user) { window.AdminDataProvider.SaveUser(CustomGrid.mapToEntity(user), function (id) { user.Id.value(id); }, function () { alert('error'); }); });
        self.usersGrid.onDeleteRow.subscribe(function (user) { window.AdminDataProvider.DeleteUser(user.Id.value(), function () { }, function () { alert('error'); }); });
        self.usersGrid.onApplyCancel.subscribe(function (user)
        {
            if (user.Id.value() == 0)
            {
                if (self.accountsGrid.editingItem() != null)
                {
                    self.accountsGrid.cancelEdit(self.accountsGrid.editingItem());
                    self.accountsGrid.removeRow(self.accountsGrid.editingItem());
                }
                self.usersGrid.removeRow(user);
            }
        });
        self.usersGrid.selectedRow.subscribe(function (user)
        {
            if (user && user.Id.value() > 0)
            {
                self.sessionPasswordsGrid.rows([]);
                self.accountsGrid.rows([]);
                window.AdminDataProvider.GetSessionPasswords(
                    user.Id.value(),
                    function (data)
                    {
                        self.sessionPasswordsGrid.rows(CustomGrid.mapToModels(data));
                    },
                    function ()
                    {
                        alert('error');
                    }
                );
                window.AdminDataProvider.GetAccounts(
                    user.Id.value(),
                    function (data)
                    {
                        self.accountsGrid.rows(mapAccountToModels(data));
                    },
                    function ()
                    {
                        alert('error');
                    }
                );
            }
            else
            {
                self.accountsGrid.rows([]);
                self.sessionPasswordsGrid.rows([]);
            }
        });

        self.addUser = function ()
        {
            var user = {
                Id: 0,
                Login: '',
                Password: '',
                FIO: '',
                PassportNumber: '',
                PassportData: '',
                IsBlocked: false,
                IsActivated: false,
                IsAdmin: false,
                CityId: 0
            };
            var model = CustomGrid.mapToModel(user, userColumns);
            model.CityId.list = ko.computed(function ()
            {
                for (var i in regionsList())
                    if (regionsList()[i].Id == model.RegionId.value())
                        return regionsList()[i].cities;
                return [];
            });
            self.usersGrid.addRow(model);
            self.usersGrid.pager.page(self.usersGrid.pager.pagesCount());
        };

        var mapAccountToModel = function (entity)
        {
            var model = CustomGrid.mapToModel(entity);
            model.CloseDate.value(entity.CloseDate == '' ? '' : new Date(entity.CloseDate * 1000));
            model.OpenDate.value(entity.OpenDate == '' ? '' : new Date(entity.OpenDate * 1000));
            model.MinBalance.max = model.Balance.value;
            return model;
        };

        var mapAccountToModels = function (entities)
        {
            var res = [];
            for (var index in entities)
            {
                res.push(mapAccountToModel(entities[index]));
            }
            return res;
        };

        var mapAccountToEntity = function (model)
        {
            var entity = CustomGrid.mapToEntity(model);
            var now = new Date();
            entity.CloseDate = model.CloseDate.value().getTime() / 1000 - (model.CloseDate.value().getTimezoneOffset() * 60);
            entity.OpenDate = model.OpenDate.value().getTime() / 1000 - (model.OpenDate.value().getTimezoneOffset() * 60);
            return entity;
        };

        var mapCardToModel = function (entity)
        {
            var model = CustomGrid.mapToModel(entity);
            model.CreateDate.value(entity.CreateDate == '' ? '' : new Date(entity.CreateDate * 1000));
            model.ExpireDate.value(entity.ExpireDate == '' ? '' : new Date(entity.ExpireDate * 1000));
            return model;
        };

        var mapCardToModels = function (entities)
        {
            var res = [];
            for (var index in entities)
            {
                res.push(mapCardToModel(entities[index]));
            }
            return res;
        };

        var mapCardToEntity = function (model)
        {
            var entity = CustomGrid.mapToEntity(model);
            entity.CreateDate = model.CreateDate.value().getTime() / 1000 - (model.CreateDate.value().getTimezoneOffset() * 60);
            entity.ExpireDate = model.ExpireDate.value().getTime() / 1000 - (model.ExpireDate.value().getTimezoneOffset() * 60);
            return entity;
        };

        self.sessionPasswordsGrid = new CustomGrid({ columns: sessionPasswordColumns, pager: { pageSize: 10 } });
        self.sessionPasswordsGrid.onApplyChanges.subscribe(function (sessionPassword) { window.AdminDataProvider.SaveSessionPassword(CustomGrid.mapToEntity(sessionPassword), function (id) { sessionPassword.Id.value(id); }); });
        self.sessionPasswordsGrid.onDeleteRow.subscribe(function (sessionPassword) { window.AdminDataProvider.DeleteSessionPassword(sessionPassword.Id.value(), function () { }, function () { alert('error'); }); });
        self.sessionPasswordsGrid.onApplyCancel.subscribe(function (sessionPassword) { if (sessionPassword.Id.value() == 0) self.sessionPasswordsGrid.removeRow(sessionPassword); });
        
        self.addSessionPassword = function ()
        {
            var sessionPassword = {
                Id: 0,
                Password: '',
                UserId: self.usersGrid.selectedRow().Id.value()
            };
            self.sessionPasswordsGrid.addRow(CustomGrid.mapToModel(sessionPassword));
            self.sessionPasswordsGrid.pager.page(self.sessionPasswordsGrid.pager.pagesCount());
        };

        self.accountsGrid = new CustomGrid({ columns: accountColumns, pager: { pageSize: 10 } });
        self.accountsGrid.onApplyChanges.subscribe(function (account) { window.AdminDataProvider.SaveAccount(mapAccountToEntity(account), function (id) { account.Id.value(id); }); });
        self.accountsGrid.onDeleteRow.subscribe(function (account) { window.AdminDataProvider.DeleteAccount(account.Id.value(), function () { }, function () { alert('error'); }); });
        self.accountsGrid.onApplyCancel.subscribe(function (account) { if (account.Id.value() == 0) self.accountsGrid.removeRow(account); });
        self.accountsGrid.selectedRow.subscribe(function (account)
        {
            if (account && account.Id.value() > 0)
                window.AdminDataProvider.GetCards(
                    account.Id.value(),
                    function (data)
                    {
                        self.cardsGrid.rows(mapCardToModels(data));
                    },
                    function ()
                    {
                        alert('error');
                    }
                );
            else
                self.cardsGrid.rows([]);
        });

        self.addAccount = function ()
        {
            var account = {
                Id: 0,
                Number: '',
                OpenDate: '',
                CloseDate: '',
                IsOpened: '',
                Currency: Currencies.BYR,
                Balance: 0,
                MinBalance: 0,
                UserId: self.usersGrid.selectedRow().Id.value()
            };
            self.accountsGrid.addRow(mapAccountToModel(account));
            self.accountsGrid.pager.page(self.accountsGrid.pager.pagesCount());
        };

        self.cardsGrid = new CustomGrid({ columns: cardColumns, pager: { pageSize: 10 } });
        self.cardsGrid.onDeleteRow.subscribe(function (card) { window.AdminDataProvider.DeleteCard(card.Id.value(), function () { }, function () { alert('error'); }); });
        self.cardsGrid.onApplyChanges.subscribe(function (card) { window.AdminDataProvider.SaveCard(mapCardToEntity(card), function (id) { card.Id.value(id); }); });
        self.cardsGrid.onApplyCancel.subscribe(function (card) { if (card.Id.value() == 0) self.cardsGrid.removeRow(card); });

        self.addCard = function ()
        {
            var card = {
                Id: 0,
                Number: '',
                CreateDate: '',
                ExpireDate: '',
                IsAttached: false,
                IsBlocked: false,
                IsExpired: false,
                CardTypeId: 0,
                AccountId: self.accountsGrid.selectedRow().Id.value()
            };
            self.cardsGrid.addRow(mapCardToModel(card));
            self.cardsGrid.pager.page(self.cardsGrid.pager.pagesCount());
        };

        var init = function ()
        {
            window.AdminDataProvider.GetCardTypes(
                function (data)
                {
                    cardTypesList(JSON.parse(data));
                    window.AdminDataProvider.GetCities(
                        0,
                        function (data)
                        {
                            var cities = data;
                            window.AdminDataProvider.GetRegions(
                                function (data)
                                {
                                    var regions = data;
                                    for (var id in regions)
                                    {
                                        regions[id].cities = cities.filter(function (city)
                                        {
                                            return city.RegionId == regions[id].Id;
                                        });
                                    }
                                    regionsList(regions);
                                    window.AdminDataProvider.GetUsers(
                                        function (data)
                                        {
                                            self.usersGrid.rows(CustomGrid.mapToModels(
                                                data,
                                                userColumns,
                                                function (model, entity)
                                                {
                                                    for (var i in cities)
                                                        if (cities[i].Id == entity.CityId)
                                                        {
                                                            model.RegionId.value(cities[i].RegionId);
                                                            break;
                                                        }
                                                    model.CityId.list = ko.computed(function ()
                                                    {
                                                        for (var i in regionsList())
                                                            if (regionsList()[i].Id == model.RegionId.value())
                                                                return regionsList()[i].cities;
                                                        return [];
                                                    });
                                                })
                                            );
                                        },
                                        function ()
                                        {
                                            alert('error');
                                        }
                                    );
                                },
                                function ()
                                {
                                    alert('error');
                                }
                            );
                        },
                        function ()
                        {
                            alert('error');
                        }
                    );
                },
                function ()
                {
                    alert('error');
                }
            );
        };

        init();

        return self;
    };

    (function (w)
    {
        @*var resources = window.ResourceManager.getResources(@Html.Raw(ViewBag.Resources));
        var settings = JSON.parse('@Html.Raw(Model.Settings.AsJson)');*@

        var viewModel = new UsersViewModel();
        ko.applyBindings(viewModel);

    })(window);
</script>
